# 文字型態 : character
x <- "Hello world"
class(x)
x <- 'Hello world'
class(x)
# 日期型態 : Date
x <- 	Sys.Date()
class(x)
x
# >[1] "2018-03-29"
# >[1] "Date"
# 時間型態 : 	POSIXct POSIXt
x <- Sys.time()
class(x)
x
# 你也可以使用assign function
assign(x,6)
# 你也可以使用assign function
assign(x,6)
assign(6,x)
?assign
# 你也可以使用assign function
assign(X,87)
X = 5
# 你也可以使用assign function
assign(X,87)
# 你也可以使用assign function
assign(X,87)
# 你也可以使用assign function
assign(Data,87)
# 你也可以使用assign function
assign("X",87)
# 你也可以使用assign function
assign("X",6)
## 賦值Assign
# <- or =
"X" <- 5
# 你也可以使用assign function
assign("X",6)
X
knitr::opts_chunk$set(echo = TRUE)
# 數值型態 : numeric
x <- 2
x
class(x)
# 數值型態 : numeric
x <- 2
x
class(x)
# 數值型態 : numeric
x <- 2
x
# 可以使用class判別變數是哪種變數型態
class(x)
# 整數型態 : integer
x <- 2L
x
class(x)
# 邏輯型態 : logical
x <- TRUE
y <- FALSE
x == 1
y == 0
# 文字型態 : character
x <- "Hello world"
x <- 'Hello world'
class(x)
# 日期型態 : Date
x <- Sys.Date()
class(x)
x
# 時間型態 : 	POSIXct POSIXt
x <- Sys.time()
class(x)
x
token  = "EAACEdEose0cBAKi2Fwc2bFZCLTZCvYebGLUU13vtB1XGf8U3LeTkqXRjnTTD1ZBprZCZAaU240rLLdrEKvKkVpwuMIJEOZBLmzu4EcGNqVA3tlBt9iXlk37QHDi7GekHpwzCtJdVnu59K9VrOkTdSMQpD7tu7EguCn6xgFOMoq3eY5uBhBd2bSXboLRxXXrJQZD"
## 利用FacebookAPI-從靠收集發文資料
library(httr)
token  = "EAACEdEose0cBAKi2Fwc2bFZCLTZCvYebGLUU13vtB1XGf8U3LeTkqXRjnTTD1ZBprZCZAaU240rLLdrEKvKkVpwuMIJEOZBLmzu4EcGNqVA3tlBt9iXlk37QHDi7GekHpwzCtJdVnu59K9VrOkTdSMQpD7tu7EguCn6xgFOMoq3eY5uBhBd2bSXboLRxXXrJQZD"
prefex = "https://graph.facebook.com/v2.12/Biotechissuck/?fields=posts.limit(100)&access_token="
url    = paste0(prefex, token)
res    = httr::GET(url)
posts  = httr::content(res)
library(magrittr)
DATA = posts$posts$data %>% do.call(rbind,.) %>% data.frame
View(DATA)
DATA[1,79]
DATA[1:79]
DATA[,1]
DATA[1,]
DATA[1:80,]
DATA <- DATA[1:80,]
View(DATA)
DATA$message
message <- DATA$message
View(message)
View(message)
message <- DATA$message
View(message)
message <- DATA[,-3]
View(message)
message <- message[,-3]
View(message)
write.csv(x = message,file = 'output.csv')
View(message)
write.csv(message,file = "test.csv")
write.csv(message,file = "test.csv")
View(message)
message <- message[,-1]
View(message)
DATA <- DATA[1:80,]
View(DATA)
write.csv(DATA,file = "test.csv")
message
View(message)
write.csv2(DATA,file="text.csv")
df <- apply(DATA,2,as.character)
View(df)
write.csv2(DATA,file="text.csv")
write.csv2(df,file="text.csv")
getwd()
getwd()
library(NLP)
library(tm)
library(stats)
library(proxy)
library(dplyr)
library(readtext)
library(jiebaRD)
library(jiebaR)
library(slam)
library(Matrix)
library(tidytext)
library(NLP)
library(tm)
install.packages("tm")
installed.packages("slam")
library(NLP)
library(tm)
install.packages("slam")
swirl()\
swirl()
source("http://wush978.github.io/R/init-swirl.R")
swirl()
skip()
chat()
submit()
?chol2inv
a <- 1
a+1
a<-2
?source
ls()
rm(a)
x <- c(10)
x <- c(10.4, 5.6, 3.1, 6.4)
c(x,x)
c(1,2,3) + c(4,5,6)
c(1,2,3) + c(4,4,6)
c(1,2,3) + c(2,4,6)
2+ c(1,2,3)
c(min(x),max(x))
range(x)
sum(x)/length(x)
var(x)
sd(x)
sort(x)
sqrt(-17)
sqrt(-17)
sqrt(-17+0i)
20:40
2*1:10
seq(1,10)
?seq
example(seq)
seq(to=10,from=1)
seq(1, 10, by = 0.5)
seq(1,10,2)
seq(from = 1, by = 2, length.out = 10)
rep(2,times = 10)
rep(x, times = 2)
rep(x, each = 2)
x > 5
x > 5 & x < 10
is.na(x)
is.na(c(1,2,NA,3))
Inf + 1
is.na(c(NA, NaN, 1))
"x"
x
"x"
"\"
\
\
"\\"
"\""
paste("a","b")
paste(c("X", "Y"), 1:10)
paste0(c("X", "Y"), 1:10)
x[c(1,3)]
x[x>5]
x[-2]
names(x) <-
| c("a", "b", "c", "d")
names(x) <- c("a", "b", "c", "d")
x
x[c("b", "d")]
# 社會服務業自民國87至民國91年的年度用電量（度）
year1 <- 87:91
power1 <- c(6097059332, 6425887925, 6982579022, 7323992602.53436, 7954239517)
# 製造業自民國87至民國91年的年度用電量（度）
power2 <- c(59090445718, 61981666330, 67378329131, 66127460204.6482, 69696372914.6949)
year1.answer1 <- year1[power1>7e9]
# 接著請計算「社會服務業從民國87年到91年的平均用電量」。
power1.mean <- mean(power1)
# 請計算「社會服務業從民國87年到91年用電量的標準差」。
power1.sd <- sd(power1)
# 在統計中，我們會計算一筆數據的「標準分數」，算法為數據減去平均數後除以標準差。
# 請計算出「社會服務業從民國87年到91年用電量的標準分數」。
power1.z <- (power1-power1.mean)/power1.sd
year1.answer2 <- year1[power2 > power1]
year1.answer2 <- year1[power1 > power2*0.1]
year1.answer2 <- year1[power1 > power2*0.1]
year1.answer2 <- year1[power1 > power2*0.1]
year1.answer2
submit()
submit()
exit()
main()
mode(x)
length(x)
mode(g)
length(g)
g[1:2]
View(g)
View(g)
list(1, a = 2)
g[[1]]
mode(g[[1]])
length(g[[1]])
g[[10]]
mode(g[[10]])
g[["cof ficients"]]
g[["coefficients"]]
length(x) <- 10
x
x[7] <- 7
x
x[13] <- 13
x
x2 <- x[c(1,3,5,7,9,11,13)]
x2
a
attributes(g
)
names(g)
attr(g, "names")
attr(g, "class")
names(g)
class(g)
#' 以下內容改自prcomp 的範例程式碼
#'
#' PCA(Principle Components Analysis) 是一個資料分析時常用的技術，會在後面的課程中，會進一步的講解它的原理。
#' 在R 中，可以利用prcomp這個指令對USArrests這筆資料進行PCA 的分析，R 則會輸出一個計算後的物件。
pca <- prcomp(USArrests, scale = TRUE)
View(pca)
#' 請同學找出PCA的「型態」。你的答案只可能是：「"character"」、「"numeric"」或「"list"」
answer1 <- mode(pca) #請將NULL替換成你的程式碼
#' 請同學將PCA的長度寫入變數answer2。
answer2 <- length(pca) #請將NULL替換成你的程式碼
#' 請同學將PCA的名字寫入變數answer3。
answer3 <- names(pca) #請將NULL替換成你的程式碼
#' PCA的元素中，有一個是各個principal components的standard deviations。
#' 請同學參考help(prcomp)說明中的Value章節。
#' 將各個principal components的standard deviation寫入變數answer4。
answer4 <- pca$sdev #請將NULL替換成你的程式碼
submit()
blood_type
factor(blood_type)
blood_type_factor <- factor(blood_type)
blood_type_factor
levels(blood_type_factor)
blood_type_factor[5] <- "C"
blood_type_factor
str(blood_type_factor)
blood_type_factor[1]> blood_type_factor[2]
grades
grades_factor <- factor(grades, ordered = TRUE, levels =
| c("C","B","A"))
grades_factor <- factor(grades, ordered = TRUE, levels =
c("C","B","A"))
grades_factor
grades_factor[1]>
grades_factor[2]
#' iris 是一個很有名的資料集。
#' 在R 的預設中，處理iris的Species欄位，也就是鳶尾花資料集時，使用的是factor型態。
species <- iris$Species
species
#' 請問species共有哪幾種類別？（答案應該是一個character vector）
answer1 <- levels(species)
answer1
#' 請問species的類別有無順序關係？
answer2 <- is.ordered(species)
answer2
#' CO2 是另一個範例數據。
plant <- CO2$Plant
#' CO2 是另一個範例數據。
plant <- CO2$Plant
#' 請問plant共有哪幾種類別？（答案應該是一個character vector）
answer3 <- levels(plant)
#' 請問plant的類別有無順序關係？
answer4 <- is.ordered(plant)
submit()
c(1:18)
x <- matrix(1:18,6,3)
?matrix
?matrix
x
str(x)
attributes(x)
dim(x)
dim(x) <- c(3,6)
x
dim(x) <- c(3,3,2)
z\
x
array(1:18, c(3, 3, 2)
)
x
x2 <- x[,,2]
x2
x[1,]
x2[1,]
x[,,2]
x[1,,2]
x
x[1,1,1] <- 2
x[1,1,1]
x[,1,1] <-3
x[,,1]
x[,,1]
x[,,2]
x[,,1]+x[,,2]
x[,,1]+1
matrix(1:4,2, 2) + 1:2
attributes(x)
dim(x) <- NULL
x
cbind(matrix(1:4, 2, 2), matrix(1:4, 2, 2))
rbind(matrix(1:4, 2, 2), matrix(1:4, 2, 2))
matrix(1:6, 2, 3) %*% matrix(3:8, 3, 2)
1:3 %*% 1:3
matrix(1:9,3,3) %*% 1:3
`matrix(1:4, 2, 2)
)
matrix(1:4, 2, 2)
t(matrix(1:4, 2, 2))
diag(1, 3)
skip()
skip()
skip()
skip()
main
main()
swirl()
x <- list(iris=iris, cars=cars, n=2)
x$n
mode(x[[3]])
mode(x[3])
x[["n"]]
x&n
x$n
a <- data.frame(class = "NTU", id = 1:10,scores = matrix(c(80:99),nrow=10,ncol=2 ) )
a[,]
a[,1]
a[1,2]
colnames(a)
a[2,"id"]
a[1:2,1:2]
class(a[1:2,1:12])
class(a[1:2,1:2])
`a[1:2, "id", drop= FALSE]
''
a[1:2, "id", drop= FALSE]
#' 請問CO2 有多少列(row)？
answer1 <- nrow(CO2) #請將NULL替換成你的程式碼
#' 請問CO2 有多少欄(column)？
answer2 <- ncol(CO2) #請將NULL替換成你的程式碼
#' 請問CO2 的各欄的名稱為何？
answer3 <- colnames(CO2) #請將NULL替換成你的程式碼
#' 請問uptake這欄的平均值為多少？
answer4 <- mean(CO2$uptake) #請將NULL替換成你的程式碼
#' CO2 共有很多很多列（answer1），
#' 請從CO2 中挑出一些列，滿足以下的條件：
#' 這些列的uptake值，超過全部CO2"平均"的uptake值
#' （`answer4`）
#'
#'   你可以先取出uptake的向量、接著拿該向量和平均值做比較、把結果的logical vector丟到`[]`的第一個參數中。
answer5 <- CO2$uptake[CO2$uptake>answer4] #請將NULL替換成你的程式碼
answer5
submit()
answer5 <- CO2[CO2$uptake>answer4] #請將NULL替換成你的程式碼
#' CO2 共有很多很多列（answer1），
#' 請從CO2 中挑出一些列，滿足以下的條件：
#' 這些列的uptake值，超過全部CO2"平均"的uptake值
#' （`answer4`）
#'
#'   你可以先取出uptake的向量、接著拿該向量和平均值做比較、把結果的logical vector丟到`[]`的第一個參數中。
answer5 <- CO2[CO2$uptake>answer4] #請將NULL替換成你的程式碼
CO2$uptake>answer4
#' CO2 共有很多很多列（answer1），
#' 請從CO2 中挑出一些列，滿足以下的條件：
#' 這些列的uptake值，超過全部CO2"平均"的uptake值
#' （`answer4`）
#'
#'   你可以先取出uptake的向量、接著拿該向量和平均值做比較、把結果的logical vector丟到`[]`的第一個參數中。
answer5 <- CO2[CO2$uptake>answer4,] #請將NULL替換成你的程式碼
answer5
#' 請問Type有多少種類別？
#' ps. answer6 應該是一個整數
answer6 <- class(CO2$Type) #請將NULL替換成你的程式碼
main(()
main()
swirl()
datasets
library(datasets)
library(help=datasets)
iris <- 1
data(iris,package = "datasets")
head(iris)
colnames(iris)
help(iris)
readBin(lvr_land.path, what = "raw", n = 3)
eadLines(file(lvr_land.path, encoding = "BIG5"),n = 1)
readLines(file(lvr_land.path, encoding = "BIG5"),n = 1)
readLines(file(lvr_land.path, encoding = "BIG5"),n = 5)
file.info(lvr_land.path)
lvr_land.info <- file.info(lvr_land.path)
class(lvr_land.info)
colnames(lvr_land.info)
lvr_land.info$size
lvr_land.bin <- readBin(lvr_land.path,what = "raw", n = 3)
lvr_land.bin <- readBin(lvr_land.path,what = "raw", n = lvr_land.info$size)
library(stringi)
lvr_land.txt <- stri_encode(lvr_land.bin, "BIG-5",
"UTF-8")
read.table(lvr_land.path, fileEncoding = "BIG-5")
lvr_land <- read.table(lvr_land.path,fileEncoding = "BIG5")
lvr_land <- read.table(file(lvr_land.path, encoding = "BIG5"), header =
TRUE, sep = ",")
main()
library(help="datasets")
library(help="datasets")
library(help=datasets)
iris
iris<-1
data(iris,package = "datasets")
head(iris)
colnames(iris)
help(iris)
readBin(lvr_land.path,
what = "raw", n = 3)
data = iris
head(data)
apply(data,2,mean)
apply(data,mean)
head(data)
data[,5]
head(data)
data[,-5]
data = data[,-5]
head(data)
apply(data,mean)
apply(data,2,mean)
apply(data,1,mean)
?apply
IrisData <- iris
iris[,5]
library(swirl)
swirl()
1:18
x <- matrix(1:18,6,3)
?matrix
x
attributes(x)
dim(x)
dim(x) <- c(3,6)
x
dim(x) <- c(3, 3, 2)
x
?array
x <- c(1,3,2)
x
IrisData <- iris
IrisData$Sepal.Length
order(IrisData$Sepal.Length)
IrisData[order(IrisData$Sepal.Length)]
IrisData[order(IrisData$Sepal.Length)]
IrisData[order(IrisData$Sepal.Length),]
?order
setwd("~/GitHub/NTU_code/NTU_code/week_8/task_8")
titanic$boat==NA
# Read the titanicTrain data and store it in titanic
titanic <- read.csv("titanicTrain.csv")
# Train data 上面的NA
str(titanic)
boat <- titanic[titanic$boat!='',]
notboat <- titanic[titanic$boat=='',]
Summary(boat$survived)
boat$survived
summary(as.factor(boat$survived))
summary(as.factor(notboat$survived))
